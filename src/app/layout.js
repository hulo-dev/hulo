'use client'
import './global.scss'
import { useState } from 'react';
import { Providers } from './providers';
import ChangeFooter from './(components)/ChangeFooter';
import Header from './(components)/Header/Header'
import Script from 'next/script';

// export const metadata = {
//   title: 'Hulo Dev Next js',
//   description: 'Generated by create next app',
// }

export default function RootLayout({ children }) {
  const [isLock, setIsLock] = useState(false);

  const lockHandler = (lock) => {
      setIsLock(lock);
  }

  return (
    <html suppressHydrationWarning lang="en" className='scroll-smooth'>
      <head>
        <Script id="microsoft-clarity-analytics" strategy="beforeInteractive">
          {`            
            (function(c,l,a,r,i,t,y){
                c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)};
                t=l.createElement(r);t.async=1;t.src="https://www.clarity.ms/tag/"+i;
                y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y);
            })(window, document, "clarity", "script", "pxbxayxiit");
          `}
        </Script>
        {/* <Script id="microsoft-clarity-analytics" strategy="beforeInteractive">
          {`            
            (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
            new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
            j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
            'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
            })(window,document,'script','dataLayer','GTM-NTPFKWDZ');
          `}
        </Script> */}
      <Script src="https://www.googletagmanager.com/gtag/js?id=G-LG9TBV688X" strategy="afterInteractive"></Script>
      <Script strategy="beforeInteractive">
        {`            
          window.dataLayer = window.dataLayer || [];
          function gtag(){dataLayer.push(arguments);}
          gtag('js', new Date());

          gtag('config', 'G-LG9TBV688X');
        `}
      </Script>
      </head>
      <body className={isLock ? 'lock' : ''}>
        <div className='overlay'/>
        <Providers>
          <Header lock={lockHandler} setIsLock={setIsLock}/>
            {children}
          <ChangeFooter />
        </Providers>
      </body>
    </html>
  )
}
